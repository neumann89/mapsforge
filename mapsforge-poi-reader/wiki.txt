#summary Information about the POI API from the mapsforge-poi-* library.
<wiki:toc />

= POI API =
This article describes how to use the POI API from the mapsforge POI library on your Android device. 

The library is still in an early stage and is very likely to change. It can be found in the `prototypes` branch. If you have any questions or problems, don't hesitate to ask our public [https://groups.google.com/group/mapsforge-dev mapsforge-dev] mailing list for help. You can also report bugs and improvement requests via our [https://code.google.com/p/mapsforge/issues/list issue tracker].
= Introduction =
_Points of Interest_ (POIs) are points with a given position, category and data. A POI database is used to store a set of POIs and to search for POIs within a given area.

The mapsforge POI library uses SQLite3 for storing POIs. For efficiency reasons Android's SQLite implementation is not used. Instead a [http://code.google.com/p/sqlite3-android/ custom wrapper] is used to provide a SQLite implementation with R-tree functionality.

All reading and writing operations are done via classes implementing the `POIPersistenceManager` interface. This allows adding, removing and changing POIs at any time. POI categories can be defined on creation time only. Categories are implemented as trees an can be accessed via classes implementing the `POICategoryManager` interface.

= Quick Start =
This section provides you with information how to create a POI database, how to use it for POI search and how to visualize the results. It is recommended that you read the following articles first:
  * GettingStartedDevelopers
  * GettingStartedMapWriter
  * GettingStartedMapView
  * OverlayAPI

== Creating a POI Database ==
The POI API project is currently located in the prototypes branch of our SVN server. The POI writer is implemented as an Osmosis plugin and does not depend on any mapsforge libraries. However, for this tutorial it is necessary to checkout and install the latest libraries.
{{{
svn checkout http://mapsforge.googlecode.com/svn/trunk/ mapsforge
svn checkout http://mapsforge.googlecode.com/svn/branches/prototypes/ mapsforge_prototypes
cd mapsforge
mvn clean install
cd ../mapsforge_prototypes
mvn clean install
}}} 
It is also nescessary to install Osmosis. You should now have a fully working environment for developing apps using the POI API. To convert OSM data to a POI database execute the following command:
{{{
osmosis --rb your_map_file.osm.pbf --poi-writer your_database.poi categoryConfigPath=mapsforge-poi-writer/src/main/config/POICategoriesOsmosis.xml
}}} 
The `--poi-writer` parameter indicates that the POI writer plugin should handle the data that was read from the given PBF file. It has two mandatory parameters. The `file` parameter defines the output file. By convention we use the file ending `.poi`. Note that you can ommit the file parameter and just write its value as we did in this example. The `categoryConfigPath` parameter defines a path to a XML configuration file that contains mappings from OSM tags to category names and a hierarchy of those categories. You can read more about this in the further sections.
== Hello World Example ==
With the POI database created you can now use it with mapsforge. Therefor you have to create a new HelloMapView project as described in our wiki. You will also need the SQLite3 native library files in your project. You can use the [http://code.google.com/p/mapsforge/source/browse/#svn%2Fbranches%2Fprototypes%2FApplications%2FAndroid%2FSamples%2Fres%253Fstate%253Dclosed Samples] project as a boilerplate as it already has all nescessary files and dependencies. The library files are located within the `libs` and `obj` folders each within a seperate sub-folder for each target architecture (_x86_, _armeabi_, _armeabi-v7_). You can delete unneeded architectures to reduce file size. 

The sources for those libraries are located in the `jni` folder. To compile these manually you need the [http://developer.android.com/tools/sdk/ndk/index.html Android NDK]. You can edit SQLite3's compilation options within `Android.mk`. The compilation process can be started with {{{ndb-build}}} from within the `jni` directory. The compiling process also moves the library files to their correct (sub)folders.

With everything set up you can now create a simple MapView as described [GettingStartedMapView here].
{{{
public class HelloPoiView extends MapActivity {
	private static final File MAP_FILE = new File(Environment.getExternalStorageDirectory().getPath(), "berlin.map");
	private static final String POI_FILE = Environment.getExternalStorageDirectory().getPath() + "/berlin.poi";

	private static final GeoPoint BRANDENBURG_GATE = new GeoPoint(52.516273, 13.377725);

	private Marker createMarker(int resourceIdentifier, GeoPoint geoPoint) {
		Drawable drawable = getResources().getDrawable(resourceIdentifier);
		return new Marker(geoPoint, Marker.boundCenterBottom(drawable));
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		MapView mapView = new MapView(this);
		mapView.setClickable(true);
		mapView.setBuiltInZoomControls(true);
		FileOpenResult fileOpenResult = mapView.setMapFile(MAP_FILE);
		if (!fileOpenResult.isSuccess()) {
			Toast.makeText(this, fileOpenResult.getErrorMessage(), Toast.LENGTH_LONG).show();
			finish();
		}
		setContentView(mapView);
}}}
The next step describes how a database is opened for read-write access. Any access to the database is encapsulated via classes implementing `PoiPersistenceManager`. The instantiation of these classes is done via a factory class. The categories and their hierarchy are maintained via classes implementing `PoiCategoryManager`. The category configuration is read-only. 
{{{
		PoiPersistenceManager pm = PoiPersistenceManagerFactory.getSQLitePoiPersistenceManager(POI_FILE);
		PoiCategoryManager cm = pm.getCategoryManager();
}}}
The `PersistenceManager` object is now used for querying all POIs within a radius of 2000 meters of the Brandenburg Gate in Berlin. The Query returns a collection of `PointOfInterest` objects. These are containers that contain a POIs position, ID, category and additional data. Additional data are stored as a byte array and can be arbitrary. There is no specification for the encoding of those data. The current implementation stores the POI's name as an UTF-8 encoded string in the data field. It is always a good idea to close an open database when there will be no more operations on it. This can simply be done by the `close()` method.
{{{
		int distanceMeters = 2000;
		Collection<PointOfInterest> pois = pm.findNearPosition(BRANDENBURG_GATE, distanceMeters, limit);
		pm.close();
}}}
With this done you can simply retrieve the pois and add them to an overlay. The center point is represented as a green marker, the found POIs are represented with red markers. 
{{{
		Marker marker = createMarker(R.drawable.marker_green, new GeoPoint(BRANDENBURG_GATE.getLatitude(),
				BRANDENBURG_GATE.getLongitude()));

		ListOverlay listOverlay = new ListOverlay();
		List<OverlayItem> overlayItems = listOverlay.getOverlayItems();
		overlayItems.add(marker);
		mapView.getOverlays().add(listOverlay);

		// Create markers and put them on the map
		GeoPoint markerPos;
		Marker m;
		for (PointOfInterest p : pois) {
			markerPos = new GeoPoint(p.getLatitude(), p.getLongitude());
			m = createMarker(R.drawable.marker_red, markerPos);
			overlayItems.add(m);
		}
	}
}
}}}
= Advanced Topics =
== Custom Category Configurations ==
If the provided category configuration does not fulfill your needs, you can easily create your own. All 
== Filtered Search ==
== POI DB Schema ==
